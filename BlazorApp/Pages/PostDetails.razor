@page "/PostDetails/{id:int}"
@using Domain.Models
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@using Microsoft.AspNetCore.Components
@inject IPostService postService
@inject ICommentService commentService
@inject IUserService userService
@inject NavigationManager navMgr
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="top-strip">
    <div class="top-strip-container">
        <img src="img/Eurologo.png" alt="Eurowind Logo" class="logo">
        <div class="text-container">
            <h1>Post details</h1>
        </div>
    </div>
</div>
<div class="card">
    @if (users == null)
    {
        <label>Loading users...</label>
    }
    else if (!users.Any())
    {
        <label>No users, you cannot create a Todo</label>
    }
    else if (dto == null)
    {
        <label>Loading Todo data...</label>
    }
    else
    {
        <div>
            <div class="title">Title: <b>@dto.Title</b></div>
        </div>
        <div>
            <div class="body"> <b>@dto.Body</b></div>
        </div>
        <div>
            <div class="author">Author: <b>@dto.OwnerUsername</b></div>
        </div>

        <div>
            <div class="comments-heading">Comments:</div>
            @if (additionalComments != null && additionalComments.Any())
            {
                @foreach (var comment in additionalComments)
                {
                    <div class="comment-box">
                        <p>Answer from: @comment.Username</p>
                        <p> @comment.Body</p>
                        <button class="button" @onclick="() => DeleteComment(comment.Id)">Delete</button>
                    </div>
                }
            }
            else
            {
                <p>No additional comments available</p>
            }
        </div>
    }

    @if (!string.IsNullOrEmpty(msg))
    {
        <label style="color: red">@msg</label>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private PostBasicDto dto = null!;
    private IEnumerable<User>? users;
    private string msg = "";
    private IEnumerable<Comment> additionalComments;

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            users = await userService.GetUsers();
            dto = await postService.GetByIdAsync(Id);
            additionalComments = await commentService.GetCommentsForPostAsync(Id);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task DeleteComment(int commentId)
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            var comment = additionalComments.FirstOrDefault(c => c.Id == commentId);
            if (comment != null && (user.Identity.Name == comment.Username || user.IsInRole("admin")))
            {
                await commentService.DeleteCommentAsync(commentId);
                additionalComments = additionalComments.Where(c => c.Id != commentId);
            }
            else
            {
                msg = "You are not authorized to delete this post.";
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
}
