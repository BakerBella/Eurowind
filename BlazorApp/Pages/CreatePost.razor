@page "/CreatePost"
@inject NavigationManager navMgr
@using System.Security.Claims
@using Domain.DTOs
@using HttpClients.ClientInterfaces
@inject IPostService postService
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<div class="top-strip">
    <div class="top-strip-container">
        <img src="img/Eurologo.png" alt="Eurowind Logo" class="logo">
        <div class="text-container">
                    <h1>Create Post</h1>
                    
                </div>
    </div>
</div>
<div class="card">
    <h3>Create Post</h3>
    <label class="title">Title:</label>
    <input class="titleText" type="text" @bind="postTitle"/>
    <label class="body">Body:</label>
    <textarea class="bodyText" @bind="postBody"></textarea>
    <div class="buttons">
        @if (!string.IsNullOrEmpty(msg))
        {
            <label style="color: red">@msg</label>
        }
        <button @onclick="Create" class="createBtn">Create Post</button>
    </div>
</div>

@code {
    private string postTitle = "";
    private string postBody = "";
    private string msg = "";
    
    protected override async Task OnInitializedAsync()
    {
        msg = "";
    }

    private async Task Create()
    {
        msg = "";
        if (string.IsNullOrEmpty(postTitle))
        {
            msg = "Title cannot be empty!";
            return;
        }
        if (string.IsNullOrEmpty(postBody))
        {
            msg = "Body cannot be empty!";
            return;
        }
        
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        try
        {
            //var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            //var user = authState.User;

            //var username = user.FindFirst(ClaimTypes.Name)?.Value;
            //var role = user.FindFirst(ClaimTypes.Role)?.Value;
            
            //var currentUser = new User { Username = username, Password = "", Role = role };
            PostCreationDto postToCreate = new(user.Identity.Name, postTitle, postBody);
            //await postService.CreateAsync(new PostCreationDto(currentUser, postTitle, postBody));
            await postService.CreateAsync(postToCreate);
            postTitle = "";
            postBody = "";
            navMgr.NavigateTo("/ViewPosts");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
}